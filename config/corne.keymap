/* Includes */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "../zmk-nodefree-config/keypos_def/keypos_42keys.h"
#include "../zmk-nodefree-config/helper.h"

/* Variables */

#define DEF 0
#define QWERTY 1
#define NAV 2
#define FN 3
#define NUM 4
#define SYS 5

#define XXX &none
#define ___ &trans

#define QUICK_TAP_MS 175

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5  // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5  // right hand
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                                  // thumbs

/* Behaviors */
&sk {  // sticky-key config
    release-after-ms = <900>;  // release after 0.6s
    quick-release;             // no double capitalization when rolling keys
};

&lt {  // layer-tap config
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&caps_word {  // mods deactivate caps-word, requires PR #1451
    /delete-property/ ignore-modifiers;
};

#define MT_CORE \
    flavor = "tap-preferred"; \
    tapping-term-ms = <220>; \
    quick-tap-ms = <220>; \
    hold-trigger-key-positions = <0>;

&mt { MT_CORE };

ZMK_BEHAVIOR(mt_home, hold_tap, bindings = <&masked_home>, <&kp>; MT_CORE)
ZMK_BEHAVIOR(mt_end,  hold_tap,  bindings = <&masked_end>, <&kp>; MT_CORE)

#define NAV_LEFT  &mt_home 0   LEFT    // tap: left  | long-tap: beginning of line
#define NAV_RIGHT &mt_end 0    RIGHT   // tap: right | long-tap: end       of line
#define NAV_UP    &mt LC(HOME) UP      // tap: up    | long-tap: beginning of document
#define NAV_DOWN  &mt LC(END)  DOWN    // tap: down  | long-tap: end       of document
#define NAV_BSPC  &mt LC(BSPC) BSPC    // tap: bspc  | long-tap: delete word backward
#define NAV_DEL   &mt LC(DEL)  DEL     // tap: del   | long-tap: delete word forward

// mask CTRL when holding left/right to avoid accidental jumps to beginning/end of document
#define MASK_MODS(NAME, MODS, BINDING) \
    ZMK_BEHAVIOR(NAME, mod_morph, \
        bindings = <BINDING>, <BINDING>; \
        mods = <MODS>; \
    )
MASK_MODS(masked_home, (MOD_LCTL), &kp HOME)
MASK_MODS(masked_end,  (MOD_LCTL), &kp END)

/* Homerow mods */
#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS) \
    ZMK_BEHAVIOR(NAME, hold_tap, \
        flavor = "balanced"; \
        tapping-term-ms = <250>; \
        quick-tap-ms = <QUICK_TAP_MS>; \
        require-prior-idle-ms = <180>; \
        bindings = <HOLD>, <TAP>; \
        hold-trigger-key-positions = <TRIGGER_POS>; \
        hold-trigger-on-release; \
    )
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs

/* Custom key-bindings */
// tap: comma | shift + tap: semicolon
ZMK_BEHAVIOR(comma_morph, mod_morph,
    bindings = <&kp COMMA>, <&kp SEMICOLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: dot | shift + tap: colon
ZMK_BEHAVIOR(dot_morph, mod_morph,
    bindings = <&kp DOT>, <&kp COLON>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: qmark | shift + tap: excl
ZMK_BEHAVIOR(qexcl, mod_morph,
    bindings = <&kp QMARK>, <&kp EXCL>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: left-parenthesis | shift + tap: less-than
ZMK_BEHAVIOR(lpar_lt, mod_morph,
    bindings = <&kp LPAR>, <&kp LT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: right-parenthesis | shift + tap: greater-than
ZMK_BEHAVIOR(rpar_gt, mod_morph,
    bindings = <&kp RPAR>, <&kp GT>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: forward-slash | shift + tap: backward-slash
ZMK_BEHAVIOR(slash_morph, mod_morph,
    bindings = <&kp FSLH>, <&kp BSLH>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: ampersand | shift + tap: pipe
ZMK_BEHAVIOR(andor_morph, mod_morph,
    bindings = <&kp AMPS>, <&kp PIPE>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)

// tap: shift | shift + tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shift, mod_morph,
    bindings = <&kp RSHFT>, <&caps_word>;
    mods = <(MOD_LSFT)>;
)

/* Combos */
// use require-prior-idle-ms for combos
#undef COMBO_HOOK
#define COMBO_HOOK require-prior-idle-ms = <150>;

#define COMBO_TERM_FAST 20
#define COMBO_TERM_MED 25
#define COMBO_TERM_SLOW 30

ZMK_COMBO(lpar,   &kp LPAR,      LM2 LM1,     DEF QWERTY, COMBO_TERM_MED)
ZMK_COMBO(rpar,   &kp RPAR,      RM1 RM2,     DEF QWERTY, COMBO_TERM_MED)

ZMK_COMBO(lbrc,   &kp LBRC,      LT2 LT1,     DEF QWERTY, COMBO_TERM_MED)
ZMK_COMBO(rbrc,   &kp RBRC,      RT1 RT2,     DEF QWERTY, COMBO_TERM_MED)

ZMK_COMBO(lbkt,   &kp LBKT,      LM3 LM2,     DEF QWERTY, COMBO_TERM_MED)
ZMK_COMBO(rbkt,   &kp RBKT,      RM2 RM3,     DEF QWERTY, COMBO_TERM_MED)

ZMK_COMBO(lt,     &kp LT,        LT3 LT2,     DEF QWERTY, COMBO_TERM_MED)
ZMK_COMBO(gt,     &kp GT,        RT2 RT3,     DEF QWERTY, COMBO_TERM_MED)

ZMK_COMBO(fslh,   &kp FSLH,      RM1 RT2,     DEF QWERTY, COMBO_TERM_MED)
ZMK_COMBO(bslh,   &kp BSLH,      LT2 LM1,     DEF QWERTY, COMBO_TERM_MED)

ZMK_COMBO(equal,  &kp EQUAL,     RB1 RB2,     DEF QWERTY, COMBO_TERM_MED)

ZMK_COMBO(undscr, &kp UNDER,     LB2 LB1,     DEF QWERTY, COMBO_TERM_MED)


/* Keymap */
ZMK_CONDITIONAL_LAYER(FN NAV, SYS)  // FN + NAV --> SYS

ZMK_LAYER(base,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
   &kp ESC       &kp Q         &kp W         &kp F         &kp P         &kp B            &kp J         &kp L         &kp U         &kp Y         &kp SQT       &kp BSPC
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   &kp LSHFT     &kp A         &kp R         &kp S         &kp T         &kp G            &kp M         &kp N         &kp E         &kp I         &kp O         &kp RET
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   &kp LCTRL     &kp Z         &kp X         &kp C         &kp D         &kp V            &kp K         &kp H         &comma_morph  &dot_morph    &qexcl        &kp LALT
//╰─────────────┴─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
                                             &kp LGUI      &mo FN        &lt NUM SPACE    &smart_shift  &mo NAV       &kp TAB                                             
//                                          ╰─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────╯                                          
)

ZMK_LAYER(qwerty,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
   ___           &kp Q         &kp W         &kp E         &kp R         &kp T            &kp Y         &kp U         &kp I         &kp O         &kp P         ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   ___           &kp A         &kp S         &kp D         &kp F         &kp G            &kp H         &kp J         &kp K         &kp L         &kp SEMI      ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   ___           &kp Z         &kp X         &kp C         &kp V         &kp B            &kp N         &kp M         ___           ___           ___           ___
//╰─────────────┴─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
                                             ___           ___           ___              ___           ___           ___
//                                          ╰─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────╯                                          
)

ZMK_LAYER(nav,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
   ___           ___           ___           ___           ___           ___              &kp PG_UP     ___           NAV_UP        ___           ___           &kp DEL
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   ___           ___           ___           ___           ___           ___              &kp PG_DN     NAV_LEFT      NAV_DOWN      NAV_RIGHT     ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   ___           ___           ___           ___           ___           ___              ___           ___           ___           ___           ___           ___
//╰─────────────┴─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
                                             ___           ___           ___              ___           ___           ___           
//                                          ╰─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────╯                                          
)

ZMK_LAYER(fn,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
   ___           ___           &kp F7        &kp F8        &kp F9        &kp F12          ___           &kp C_PREV    &kp C_VOL_UP  &kp C_NEXT    ___           &tog QWERTY
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   ___           ___           &kp F4        &kp F5        &kp F6        &kp F11          ___           &kp C_MUTE    &kp C_VOL_DN  &kp C_PP      ___           &kp PSCRN
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   ___           ___           &kp F1        &kp F2        &kp F3        &kp F10          ___           ___           ___           ___           ___           &kp RALT
//╰─────────────┴─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
                                             ___           ___           ___              ___           ___           ___           
//                                          ╰─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────╯                                          
)

ZMK_LAYER(num,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
   ___           ___           ___           ___           &andor_morph  &kp AT           &kp STAR      &kp N7        &kp N8        &kp N9        &kp PLUS      ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   ___           &kp CARET     &kp GRAVE     &lpar_lt      &rpar_gt      &kp HASH         &slash_morph  &kp N4        &kp N5        &kp N6        &kp MINUS     ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   ___           ___           ___           &kp LBKT      &kp RBKT      &kp DLLR         &kp PRCNT     &kp N1        &kp N2        &kp N3        &kp EQUAL     ___
//╰─────────────┴─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
                                             ___           ___           ___              ___           &kp N0        ___           
//                                          ╰─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────╯                                          
)

ZMK_LAYER(sys,
//╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮  ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮
   &bt BT_CLR    &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  ___              ___           ___           ___           ___           ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   ___           ___           ___           ___           ___           &bootloader      &bootloader   ___           ___           ___           ___           ___
//├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤
   ___           ___           ___           ___           ___           &sys_reset       &sys_reset    ___           ___           ___           ___           ___
//╰─────────────┴─────────────┴─────────────┴─────────────┼─────────────┼─────────────┤  ├─────────────┼─────────────┼─────────────┴─────────────┴─────────────┴─────────────╯
                                             ___           ___           ___              ___           ___           ___           
//                                          ╰─────────────┴─────────────┴─────────────╯  ╰─────────────┴─────────────┴─────────────╯                                          
)
 